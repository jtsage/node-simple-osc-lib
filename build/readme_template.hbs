![GitHub package.json version](https://img.shields.io/github/package-json/v/jtsage/node-simple-osc-lib) ![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/jtsage/node-simple-osc-lib/node.js.yml) ![Coverage](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fraw.githubusercontent.com%2Fjtsage%2Fnode-simple-osc-lib%2Fmain%2Fcoverage%2Fcoverage-summary.json&query=%24.total.lines.pct&suffix=%25&label=coverage)

# simple-osc-lib

This package provides some node.js utilities for working with [OSC](http://opensoundcontrol.org/), a format for sound and systems control.  

Here we implement the OSC 1.1 specification.  OSC is a transport-independent protocol, so we don't provide any server objects, as you should be able to use OSC over any transport you like.  The most common is probably udp, but tcp is not unheard of.

This package was heavily influenced by the [osc-min](https://github.com/russellmcc/node-osc-min) API

## Differences from osc-min

+ no support for the message translation stuff
+ no support for parameter guessing in oscBuildMessage() or oscBuildBundle()
+ added `c` and `r` data types
+ zero-dependency package

## Input types

+ `s` :: `string` - string value (String padded to 32 bit block with nulls)
+ `f` :: `float` - numeric value (FloatBE - 32 bits)
+ `d` :: `double` - numeric value (DoubleBE - 64 bits)
+ `i` :: `integer` - numeric value (Int32BE - 32 bits)
+ `b` :: `blob` - node.js Buffer value (Buffer padded to 32 bit block with nulls)
+ `T` :: `true` - no value (0 bits)
+ `F` :: `false` - no value (0 bits)
+ `N` :: `null` - no value (0 bits)
+ `I` :: `bang` - no value (0 bits)
+ `r` :: `color` - RGBA as an array [R(0-255),G,B,A] (4 x UInt8 - 32 bits)
+ `c` :: `char` - Character (Int32BE - 32 bits)
+ `t` :: `timetag` - numeric value (pair of UInt32BE - 64 bits)
+ `A` :: `address` - non-stander string value, with special processing to ensure a valid osc address string (String padded to 32 bit block with nulls)

Note that `type` is always a string - i.e. `"true"` rather than `true`.

## Standard Usage

```javascript
const osc     = require('simple-osc-lib')

const oscRegular = new osc.simpleOscLib( /* options */)
```

### Build an OSC Single Message Buffer for sending

```javascript
const buffer = oscRegular.buildMessage({
    address : '/hello',
    args    : [
        { type : 'string', value : 'hi' },
        { type : 'string', value : 'there' },
    ],
})
```

### Build an OSC Bundle Buffer for sending

```javascript
const oscMessage1 = { address : '/hello', args : [...] }
const oscMessage2 = { address : '/goodbye', args : [...] }

// Generate a timetag half a second into the future
const timeTag = oscRegular.getTimeTagBufferFromDelta(0.5)

const buffer = oscRegular.buildBundle({
    timetag : timeTag,
    elements : [oscMessage1, oscMessage2],
})
```

### Decode an OSC Packet from receiving

```javascript
const oscMessage = oscRegular.readPacket(buffer)
```

Single message

```javascript
{
    type    : osc-message,
    address : /goodbye,
    args: [
        { type : 'string', value : 'cruel' },
        { type : 'string', value : 'world' }
    ]
}
```

Bundle (note that bundles can be nested)

```javascript
{
    type     : 'osc-bundle',
    timetag  : [ /* date Object */ ],
    elements : [ /* zero or more osc-messages or osc-bundles */ ]
}
```

## Return arguments

The type list above gives the text representation of what will appear in the `type` field of the `osc-message`. Additionally, arrays will be nested as such

```javascript
{
    type    : osc-message,
    address : /goodbye,
    args: [
        { type : 'array',  value : [
            { type : 'string', value : 'cruel' },
            { type : 'string', value : 'world' },
        ]},
    ]
}
```

## timetag Processing of Bundles

This package provides no pre-processing for timetags - they are returned as found, in all circumstances.  The OSC 1.1 spec does not clarify the proper handling of timetags in the past, as different implementations do different things with them. A timetag in the past may mean the bundle should be discarded, or it may mean it should be acted on immediately - this behavior is left to your preference. Please do not assume a received timetag refers to a future event.

## Overriding default options

Options are set when initializing the class - they can be accessed or changed at any time by accessing the `options` key.

+ __asciiOnly__ - Limit strings to ASCII characters.
+ __blockCharacter__ - Character to delineate 4-byte blocks in debug output (or '')
+ __debugCharacter__ - Character to replace NULLs in debug output.
+ __preprocessor__ - osc-message processor, take a single argument of an osc-message.  Only run on individual messages.
+ __strictAddress__ - Use strict address mode (all string rules, must begin with slash).
+ __strictMode__ - Use strict mode.

By default, no strict mode options are enabled.

The preprocessor can be used as a callback for each message received.  See section below for an example

> "The code is more what you'd call 'guidelines' than actual rules."
>  _â€“ Barbossa, Pirates of the Caribbean_

## Exported Functions and Data Structures

{{>main}}

## X32 Pre-Processing

The X32 version of the oscMessage processor adds some additional data, found in the `props` key.

Additionally the `wasProcessed` will be set true if the message was covered.

The following example enables all current X32 extra processing - if you are only interesting in a subset you can set `activeNodeTypes` and `activeRegularTypes` to only process what you care about.

### Example

```javascript
const osc     = require('simple-osc-lib')
const osc_x32 = require('simple-osc-lib/x32') // X32 specific processing (optional)

const x32Pre = new osc_x32.x32PreProcessor({
	activeNodeTypes : 'all',
	activeRegularTypes : 'all',
})

const oscRegular = new osc.simpleOscLib({
	preprocessor : (msg) => x32Pre.readMessage(msg),
})
```

{{>osc-coverage}}


&copy; 2024 J.T.Sage - ISC License